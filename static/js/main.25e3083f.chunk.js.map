{"version":3,"sources":["components/ContactList/ContactList.module.css","redux/phonebook/contacts-actions.js","redux/phonebook/contacts-operations.js","redux/phonebook/contacts-selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.js","redux/phonebook/contacts-reduser.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactFailure","deleteContactRequest","deleteContactSuccess","deleteContactFailure","filterContact","values","dispatch","contact","name","number","axios","post","then","data","catch","error","contactId","delete","getFilter","state","contacts","filter","getVisibleContacts","createSelector","items","normalizedFilter","toLowerCase","includes","connect","contactsSelectors","deleteContact","id","contactsOperations","className","css","contactList","map","contactListItem","type","onClick","ContactForm","nameInputId","shortid","generate","numberInputId","handleChange","event","setState","target","value","reset","handleSubmit","preventDefault","props","onAdd","onSubmit","this","label","pattern","title","required","onChange","placeholder","input_name","add_btn","Component","operations","valueState","filterByName","actions","App","createReducer","payload","loading","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25e3083f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1Zd4T\",\"contactListItem\":\"ContactList_contactListItem__2IBNd\"};","// import types from './contacts-types';\r\n\r\nimport { createAction } from '@reduxjs/toolkit';\r\n// import shortid from 'shortid';\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactFailure = createAction('contacts/addContactError');\r\n\r\n// export const delContactRequest = createAction('contacts/delContactRequest');\r\n// export const delContactSuccess = createAction('contacts/delContactSuccess');\r\n// export const delContactFailure = createAction('contacts/delContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactFailure = createAction('contacts/deleteContactError');\r\n\r\n// export const deleteContact = createAction('contacts/delete');\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: types.delete,\r\n//   payload: contactId,\r\n// });.\r\n\r\nexport const filterContact = createAction('contacts/changeFilter');\r\n\r\n// const filterContact = value => ({\r\n//   type: types.filter,\r\n//   payload: value,\r\n// });\r\n\r\n// export default {\r\n//   addContactRequest,\r\n//   addContactSuccess,\r\n//   addContactFailure,\r\n//   deleteContact,\r\n//   filterContact,\r\n// };\r\n\r\n// contacts: prevState.contacts.filter(contact => contactId !== contact.id),\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactFailure,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactFailure,\r\n} from './contacts-actions';\r\n\r\nconst addContact = values => dispatch => {\r\n  const contact = {\r\n    name: values.name,\r\n    number: values.number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('http://localhost:3000/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactFailure(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`http://localhost:3000/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactFailure(error)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n// const getVisibleContacts = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\nexport default {\r\n  getFilter,\r\n  getVisibleContacts,\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n// import contactsOperations from '../../redux/phonebook/contacts-operations';\r\n// import contactsSelectors from '../../redux/phonebook/contacts-selectors';\r\nimport { contactsOperations, contactsSelectors} from '../../redux/phonebook'\r\nimport css from './ContactList.module.css';\r\n\r\nconst ContactList = ({contacts, deleteContact}) => (\r\n  <ul className={css.contactList}>\r\n          {contacts.map(contact => \r\n            <li className={css.contactListItem} >\r\n              <p>{contact.name}</p>\r\n              <p>{contact.number}</p>\r\n              <button type=\"button\" onClick={() => deleteContact(contact.id)}>Delete contact</button>\r\n            </li>)\r\n          }\r\n          \r\n        \r\n</ul>\r\n)\r\n\r\n// const getVisibleContacts = (allContacts, filterContact) => {\r\n//   const normalizedFilter = filterContact.toLowerCase();\r\n\r\n//   return allContacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    contacts: contactsSelectors.getVisibleContacts(state),\r\n  };\r\n};\r\n\r\n// const mapStateToProps = (state) => ({ contacts: state.contacts.items })\r\nconst mapDispatchToProps = dispatch => ({ deleteContact: id => dispatch(contactsOperations.deleteContact(id)),});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { Component } from 'react';\r\nimport operations from '../../redux/phonebook/contacts-operations.js';\r\nimport { connect } from 'react-redux';\r\nimport shortid from 'shortid';\r\nimport css from './ContactForm.module.css'\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: ''\r\n  }\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  // handleChange = event => {\r\n  //   const {name, value} = event.currentTarget\r\n\r\n  //   this.setState({\r\n  //     [name]: value,\r\n  //   });\r\n  // };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onAdd(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={css.ContactForm}>\r\n      <label className={css.label} >\r\n        Name:\r\n        <input\r\n            id={this.nameInputId}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.handleChange}\r\n            // className={css.input_name}\r\n            placeholder=\"Input name\"\r\n        />\r\n      </label>\r\n      <label label className={css.label} >\r\n        Phone number:\r\n           <input\r\n          id={this.numberInputId}\r\n          type=\"number\"\r\n          name=\"number\"\r\n          value={this.state.number}\r\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.handleChange}\r\n          className={css.input_name}\r\n          placeholder=\"Input number\"\r\n        />\r\n            \r\n      </label>\r\n\r\n        <button type='submit' className={css.add_btn}>Add contact</button>\r\n        \r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({onAdd: value => dispatch(operations.addContact(value))})\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/phonebook/contacts-actions';\r\nimport contactsSelectors from '../../redux/phonebook/contacts-selectors';\r\nimport './Filter.css'\r\n\r\nconst Filter = ({valueState, filterByName}) => {\r\n  return (\r\n    <label className=\"label\" >\r\n\t\t\t<input type=\"text\"\r\n\t\t\t\tvalue={valueState}\r\n\t\t\t\tonChange={filterByName} />\r\n      \r\n    </label>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({ valueState: contactsSelectors.getFilter(state) });\r\n\r\nconst mapDispatchToProps = dispatch => ({ filterByName: event => dispatch(actions.filterContact(event.target.value))});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { Component } from 'react';\nimport ContactList from './components/ContactList/ContactList.jsx';\nimport ContactForm from './components/ContactForm/ContactForm.jsx';\nimport Filter from './components/Filter/Filter.jsx';\n// import shortid from 'shortid';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //   ],\n  //   filter: '',\n  //   name: '',\n  //   number: '',\n  // };\n\n  // deleteContact = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contactId !== contact.id),\n  //   }));\n  // };\n\n  // addContact = ({ name, number }) => {\n  //   if (this.state.contacts.some(contact => contact.name === name)) {\n  //     alert(`${name} is already in contacts.`);\n  //     return;\n  //   }\n  //   const contact = { id: shortid.generate(), name, number };\n  //   this.setState(prevState => ({\n  //     contacts: [contact, ...prevState.contacts],\n  //   }));\n  // };\n\n  // filter = event => {\n  //   this.setState({\n  //     filter: event.currentTarget.value,\n  //   });\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   console.log('App componentDidUpdate');\n\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     console.log('Updated field contacts');\n\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  render() {\n    // const normalizedThisFilterState = this.state.filter.toLowerCase();\n    // const visibleContacts = this.state.contacts.filter(contact =>\n    //   contact.name.toLowerCase().includes(normalizedThisFilterState),\n    // );\n    return (\n      <>\n        {/* <ContactForm onAdd={this.addContact} /> */}\n        <ContactForm />\n\n        <ContactList\n        // contacts={visibleContacts}\n        // deleteContact={this.deleteContact}\n        />\n\n        {/* <Filter valueState={this.state.filter} filterByName={this.filter} /> */}\n        <Filter />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import types from './contacts-types';\r\nimport {\r\n  // fetchContactsRequest,\r\n  // fetchContactsSuccess,\r\n  // fetchContactsFailure,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactFailure,\r\n  // deleteContact,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactFailure,\r\n  filterContact,\r\n  // changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [filterContact]: (state, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactFailure]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactFailure]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","// import { combineReducers } from 'redux';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './phonebook/contacts-reduser';\r\nimport logger from 'redux-logger';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n// const rootReducers = combineReducers({ contacts: contactsReducer });\r\n// const store = createStore(rootReducers, composeWithDevTools());\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: contactsReducer },\r\n  middleware,\r\n});\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__1nP7t\",\"label\":\"ContactForm_label__1u4Tw\",\"input_name\":\"ContactForm_input_name__3Th8M\",\"add_btn\":\"ContactForm_add_btn__3I6Xg\"};"],"sourceRoot":""}